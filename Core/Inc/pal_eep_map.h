/** @file pal_eep_map.h
 *
 *  @brief memory map for EEPROM
 *
 *  $Rev: 22140 $
 *
 *  $Author: dekestjo $
 *
 *  $Date: 2021-02-08 12:04:05 +0100 (Mo, 08. Feb 2021) $
 *
 *  Copyright (C) 2015 ifm efector gmbh
 */
/* $Id: pal_eep_map.h 22140 2021-02-08 11:04:05Z dekestjo $ */

/* include guard *************************************************************/
#ifndef PAL_EEP_MAP_H
#define PAL_EEP_MAP_H

/* compiler switches *********************************************************/
 
/* includes ******************************************************************/
#include "pal_config.h"
//#include "pal_eep_map_svn_rev.h"   /*svn revision as constant*/
/* defines *******************************************************************/
/*note: modification of PAL_EEP_byEEP_MAP_VER_MAJ_VAL, or PAL_EEP_byEEP_MAP_VER_MIN_VAL or
PAL_EEP_byEEP_MAP_VER_BUG_VAL and reset results in initlaisation of the EEPROM with default values

all strings mit be zero terminated '\0' to work with IO-Link

all data is stored lowbyte first in order to work with the IO-Link lib. strings are stored first character at first address
*/


/* NOTE:
 *
 * - modification of PAL_EEP_MAP_VER_MAJ or PAL_EEP_MAP_VER_MIN or PAL_EEP_MAP_VER_BUG
 *   results in initialisation of the EEPROM with default values except some from
 *   initialisation excluded parameters (see parameter overview XLS for details)
 *
 * - all strings must be zero terminated '\0' to work with IO-Link
 *
 * - all data is stored low byte first in order to work with the IO-Link lib,
 *   strings are stored first character at first address
 */

/** marker to indicate if a parameter which is excluded from EEPROM initialisation
    was written already, if yes do not overwrite the correspondent parameter in
    EEPROM during next EEPROM initialization */
#define INIT_MARKER 0x4D
/**********************************************************************/
/********************Default init values ******************************/
/**********************************************************************/
#define PAL_EEP_byDEFAULT_VAL                       ((uint8_t) 0xFF)       /*< Default init value*/
#define PAL_EEP_wDEFAULT_VAL                        ((uint16_t)0xFFFF)     /*< Default init value*/

#define PAL_EEP_MAP_VER_MAJ                         ((uint8_t)0x00)        /*< value of major version EEPROM table*/
#define PAL_EEP_MAP_VER_MIN                         ((uint8_t)0x00)        /*< value of minor version EEPROM table*/
#define PAL_EEP_MAP_VER_BUG                         ((uint8_t)0x03)        /*< value of bugfix version EEPROM table*/
#define PAL_EEP_IOL_FIRMWARE_REVISION_VAL           ((char_t const*)"0.0.7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")

/**********************************************************************/
/*todo add defines for sample, serial, M-Type, M-Type Sample*/
#if defined SAMPLE
    /*sample M0xxx */  /*todo get sample number*/
    #define PAL_EEP_SW_SN_FLASH_VAL                     ((char_t const*)"1234567800") /*< ERP Number of SW*/   /*todo get SAP Number*/
#else      
     /*for serial production.*/
    #define PAL_EEP_SW_SN_FLASH_VAL                     ((char_t const*)"1234567800") /*< ERP Number of SW*/   /*todo get SAP Number*/
#endif
      
#define HAS_DIN   /*if defined, sensor has Din */ /*todo use compile switch*/ 

#define PAL_EEP_SW_SN_EEP_VAL                       ((char_t const*)"xxxxxxxxxx") /*< ERP Number of SW, pogrammed in the external EEPROM  */

#define PAL_EEP_SW_SN_SVN_INIT_VAL                  ((char_t const*)"\40\40\40\40\40\40\40\40\40\40\40\40") /*< init all 12 characters with "\SPACE" */
#define PAL_EEP_SW_SN_SVN_INIT_SZ                   ((uint8_t) 12) /*< size of PAL_EEP_sSW_SN_SVN_INIT_VAL */

#define SW_SVN_REV                                  ((char_t const*)SVN_LATEST_WC_REV) /*< SVN revision of last build. value is automatically generated by svn*/

/**********************************************************************/
/*SSC1*/
#define PAL_EEP_SSC1_RST_LOGIC_VAL                  ((uint8_t)0)        /*< switching point logic SSC1. 0= normally open  = Highactive = closer */
#define PAL_EEP_SSC1_RST_DS_VAL                     ((uint16_t)0)        /*< SSC1 Einschaltverzögerung */
#define PAL_EEP_SSC1_RST_DR_VAL                     ((uint16_t)0)        /*< SSC1 Ausschaltverzögerung */

/*SSC2*/ 
#define PAL_EEP_SSC2_RST_LOGIC_VAL                  ((uint8_t)0)         /*< switching point logic SSC2. 0= normally open  = Highactive = closer */
#define PAL_EEP_SSC2_RST_DS_VAL                     ((uint16_t)0)        /*< SSC2 Einschaltverzögerung */
#define PAL_EEP_SSC2_RST_DR_VAL                     ((uint16_t)0)        /*< SSC2 Ausschaltverzögerung */

/*general switching*/
#define PAL_EEP_RST_PN_MODE_VAL                     ((uint8_t)0x00)      /*< operation mode of output 0x00 => PNP, 0x01 => NPN*/

#define PAL_EEP_OU2_RST_VAL                         PAL_IOL_ANALOG_USER_CFG_SIO_SSC2  /*< Config of Ou2 */
#define PAL_EEP_OU1_RST_VAL                         PAL_IOL_ANALOG_USER_CFG_SIO_SSC1  /*< Config of Ou1 */

#define PAL_EEP_DFU1_RST_VAL                        PAL_IOL_ANALOG_USER_FUNCTION_SCT1 /*parameter for diagnosis funtion to control output, when Ou1 = PAL_IOL_ANALOG_USER_CFG_DOU  */  
#define PAL_EEP_DFU2_RST_VAL                        PAL_IOL_ANALOG_USER_FUNCTION_SCT2 /*parameter for diagnosis funtion to control output, when Ou2 = PAL_IOL_ANALOG_USER_CFG_DOU  */  

#define PAL_EEP_S1CT_THRES_VAL                  ((int32_t)5)    /*todo default = 100?*/     /*S1CT Bit is TRUE, if switch counter is greater than this value*/             
#define PAL_EEP_S1CT_COUNT_CONDITION_VAL        ((uint8_t)1)      /*switching condition see iol_switch_counter_flancs_t */  
#define PAL_EEP_S1CT_COUNT_AUTO_RELOAD_VAL      ((uint8_t)1)      /*BOOL: if == TRUE, auto-reload of switch counter is activated: counter value is set to zero at match of threshold*/            
#define PAL_EEP_S1CT_COUNT_DUTRATION_MS_VAL     ((uint16_t)100)   /*duration for output to remain ON, when autoreload is activated. value zero: stay ON until next flanc*/      

#define PAL_EEP_S2CT_THRES_VAL                  ((int32_t)5)     /*todo default = 100?*/           
#define PAL_EEP_S2CT_COUNT_CONDITION_VAL        ((uint8_t)1)      /*1 = rising, 2 = falling, 3 = both*/
#define PAL_EEP_S2CT_COUNT_AUTO_RELOAD_VAL      ((uint8_t)1)                 
#define PAL_EEP_S2CT_COUNT_DUTRATION_MS_VAL     ((uint16_t)100)        

#define PAL_EEP_LO_LIMIT_OPENING_TIME_MS_VAL    ((uint16_t)0)     /*< low limit for opening time in ms*/
#define PAL_EEP_HI_LIMIT_OPENING_TIME_MS_VAL    ((uint16_t)30000) /*< high limit for opening time in ms*/ 
#define PAL_EEP_LO_LIMIT_CLOSING_TIME_MS_VAL    ((uint16_t)0)     /*< low limit for closing time in ms*/
#define PAL_EEP_HI_LIMIT_CLOSING_TIME_MS_VAL    ((uint16_t)30000) /*< high limit for closing time in ms*/

#define PAL_EEP_LO_LIMIT_OPENING_CNT_VAL        ((uint16_t)0)     /*< low limit for opening time counter*/
#define PAL_EEP_HI_LIMIT_OPENING_CNT_VAL        ((uint16_t)0)     /*< high limit for opening time counter*/
#define PAL_EEP_LO_LIMIT_CLOSING_CNT_VAL        ((uint16_t)0)     /*< low limit for closing time counter*/ 
#define PAL_EEP_HI_LIMIT_CLOSING_CNT_VAL        ((uint16_t)0)     /*< high limit for closing time counter*/

#define PAL_EEP_TIMEOUT_OPENING_CLOSING_TIME_MS_VAL ((uint16_t)0) /*< timeout for opening and closing time in ms. 0 is deactivated*/

#if defined T_TYPE
/*todo*/
/*todo autoteach?*/

#define PAL_EEP_VALVE_MODE_RST_VAL        ((uint8_t)PAL_VALVE_MONOSTABILE_SV)      /*< valve mode*/

#else
#endif
/*pal_eep_wrt_default_SSC12_param_check()*/
/**********************************************************************/

#define PAL_EEP_SP12_DS_MIN_VAL                     ((uint16_t)0)         /*< lowest allowed value for DS*/
#define PAL_EEP_SP12_DS_MAX_VAL                     ((uint16_t)60000)     /*< highest allowed value for DELAY_SW_ON_10msDS*/
#define PAL_EEP_SP12_DR_MIN_VAL                     ((uint16_t)0)         /*< lowest allowed value for DR*/
#define PAL_EEP_SP12_DR_MAX_VAL                     ((uint16_t)60000)     /*< highest allowed value for DR*/

#define PAL_EEP_wLIMIT_OPENING_CLOSING_TIME_MIN_MS_VAL ((uint16_t)0)      /*< lowest allowed value for low limit opening or closing time*/
#define PAL_EEP_wLIMIT_OPENING_CLOSING_TIME_MAX_MS_VAL ((uint16_t)30000)  /*< highest allowed value for low limit opening or closing time*/    
      
/*pal_eep_wrt_diag()*/
/**********************************************************************/
#define PAL_EEP_PWR_UPS_VAL                         ((uint32_t)0)          /*<power up counter*/
#define PAL_EEP_OP_HR_VAL                           ((uint32_t)0)          /*<hours of operation: full hours*/

      /*todo tbd log temp min temp max?*/
//#define PAL_EEP_TEMP_MIN_VAL                       ((int16_t)INT16_MAX)    /*<init vale for logging the minimum temperaure of operation [1/100°C]*/
//#define PAL_EEP_TEMP_MAX_VAL                       ((int16_t)INT16_MIN)    /*<init vale for logging the maximum temperaure of operation [1/100°C]*/

/*pal_eep_wrt_bm_default() */
/**********************************************************************/
/*todo determine values by measurement*/
#define PAL_EEP_V_DEMOD_SENSOR1_LIMIT_LOWER_VAL       ((uint16_t)0)       /*< lower limit for V_DEMOD check [12Bit ADC, VDD Ref+], value determined by measurement, VDemod == lower limit is still OK*/
#define PAL_EEP_V_DEMOD_SENSOR1_LIMIT_UPPER_VAL       ((uint16_t)4095)    /*< upper limit for V_DEMOD check [12Bit ADC, VDD Ref+], value determined by measurement. */
/*todo determine values by measurement*/
#define PAL_EEP_V_DEMOD_SENSOR2_LIMIT_LOWER_VAL       ((uint16_t)0)       /*< lower limit for V_DEMOD check [12Bit ADC, VDD Ref+], value determined by measurement, VDemod == lower limit is still OK*/
#define PAL_EEP_V_DEMOD_SENSOR2_LIMIT_UPPER_VAL       ((uint16_t)4095)    /*< upper limit for V_DEMOD check [12Bit ADC, VDD Ref+], value determined by measurement. */

#define PAL_EEP_TEMP_THRES_LO_1C_VAL                  ((int16_t)-45)      /*< lower limit for Temperature check[1°C]*/
#define PAL_EEP_TEMP_THRES_HI_1C_VAL                  ((int16_t)105)      /*< upper limit for Temperature check[1°C]*/

#define PAL_EEP_PT1_SHIFT_VDEMOD_SENSOR1_VAL          ((uint8_t)4)        /*< filter constant for filtering VDEMOD Sensor 1 (Shift of PT1 filter)*/
#define PAL_EEP_PT1_SHIFT_VDEMOD_SENSOR2_VAL          ((uint8_t)4)        /*< filter constant for filtering VDEMOD Sensor 2 (Shift of PT1 filter)*/
#define PAL_EEP_PT1_SHIFT_VTEMP_VAL                   ((uint8_t)6)        /*< filter constant for filtering V Temp (Shift of PT1 filter)*/

#define PAL_EEP_THRES_TARGET_DAC_SENSOR1_VAL          ((uint16_t)1500)    /*< threshold for target detection. value is written by teach during production*/
#define PAL_EEP_THRES_NO_TARGET_DAC_SENSOR1_VAL       ((uint16_t)2000)    /*< threshold for target detection. value is written by teach during production*/

#define PAL_EEP_THRES_TARGET_PWM_SENSOR2_VAL          ((uint16_t)1500)    /*< threshold for target detection. value is written by teach during production*/
#define PAL_EEP_THRES_NO_TARGET_PWM_SENSOR2_VAL       ((uint16_t)2000)    /*< threshold for target detection. value is written by teach during production*/
      
/*todo determine way to tempcomp - tempcomp of switching thresholds Sensor 1 (DAC) and Sensor 2 (PWM)*/
#define PAL_EEP_TEMPCOMP_S1_FA_VAL                     ((float32_t)0.0)    /*default temperature compensation factor*/
#define PAL_EEP_TEMPCOMP_S1_FB_VAL                     ((float32_t)0.0)    /*default temperature compensation factor*/
#define PAL_EEP_TEMPCOMP_S1_FC_VAL                     ((float32_t)0.0)    /*default temperature compensation factor*/
#define PAL_EEP_TEMPCOMP_S2_FA_VAL                     ((float32_t)0.0)    /*default temperature compensation factor*/
#define PAL_EEP_TEMPCOMP_S2_FB_VAL                     ((float32_t)0.0)    /*default temperature compensation factor*/
#define PAL_EEP_TEMPCOMP_S2_FC_VAL                     ((float32_t)0.0)    /*default temperature compensation factor*/ 
      
/*pal_eep_wrt_iol_data() */
/**********************************************************************/
/*default values*/
#define PAL_EEP_IOL_DS_CHECKSUM                     ((char_t const*)"1234")  /*arbitrary value "1234" = 0x31323334, not zero terminated. first byte, at lowest address = 0x31...*/
#define PAL_EEP_IOL_DS_UPLOAD_FLAG                  ((uint8_t)0x00)          /*0x00 => no DS upload*/
#define PAL_EEP_IOL_DEV_ACC_LOCKS                   ((uint16_t)0x0000)       /*0x0000 => all unlocked*/
#define PAL_EEP_IOL_VENDOR_ID_VAL                   ((uint16_t)0x3601)       /*< byte swapped: 0x0136 = ifm*/

/*todo get device ID*/
/*compile switches T_TYPE and SAMPLE are defined in project configuration */
#if defined T_TYPE
    #if defined SAMPLE
        /*Sample T-Type*/
        /*todo get device IDs*/
        #define PAL_EEP_IOL_DEVICE_ID_VAL1                  ((uint8_t)0xF4)          /*sample M TBD 16.001.000  16.001.099*/
        #define PAL_EEP_IOL_DEVICE_ID_VAL2                  ((uint8_t)0x27)  		 /**/
        #define PAL_EEP_IOL_DEVICE_ID_VAL3                  ((uint8_t)0xE9)          /**/
    #else
        /*serial production T-Type*/
        /*todo get device IDs*/
        #define PAL_EEP_IOL_DEVICE_ID_VAL1                  ((uint8_t)0x00)          /*for serial production.*/
        #define PAL_EEP_IOL_DEVICE_ID_VAL2                  ((uint8_t)0x06)  		 /**/
        #define PAL_EEP_IOL_DEVICE_ID_VAL3                  ((uint8_t)0x56)          /**/
    #endif

#else
    #if defined SAMPLE
        /*Sample IND, not T-Type (no PD-IN)*/
        /*todo get device IDs*/
        #define PAL_EEP_IOL_DEVICE_ID_VAL1                  ((uint8_t)0xF4)          /*sample M TBD 16.001.000  16.001.099*/
        #define PAL_EEP_IOL_DEVICE_ID_VAL2                  ((uint8_t)0x27)  		 /**/
        #define PAL_EEP_IOL_DEVICE_ID_VAL3                  ((uint8_t)0xE8)          /**/
    #else
        /*serieal production IND, not T-Type (no PD-IN)*/
        /*todo get device IDs*/
        #define PAL_EEP_IOL_DEVICE_ID_VAL1                  ((uint8_t)0x00)          /*for serial production.*/
        #define PAL_EEP_IOL_DEVICE_ID_VAL2                  ((uint8_t)0x06)  		 /**/
        #define PAL_EEP_IOL_DEVICE_ID_VAL3                  ((uint8_t)0x56)          /**/
    #endif

#endif



#define PAL_EEP_IOL_USER_UNBLOCKING                 ((uint8_t)0x00)          /*0x00 => operate unblocked*/
#define PAL_EEP_IOL_STARTUP_ACCESS                  ((uint16_t)0x7001)        /*0x0001 = user, 7001 = MASK_USER | MASK_FDT | MASK_SERVICE | MASK_PRODUCTION; after 2 minutes of operation, the access is rest to user automatically by the stack*/
/*PAL_EEP_wIOL_WRITE_DEFAULT_COMPLETE_FLAG_VAL PAL_EEP_byIOL_WRITE_DEFAULT_COMPLETE_FLAG_NOK    --- is set not in pal_eep_wrt_iol_data()*/
#define PAL_EEP_IOL_VENDOR_NAME_VAL                 ((char_t const*)"ifm electronic gmbh\0\0\0\0\0\0\0\0\0\0\0\0\0")
#define PAL_EEP_IOL_VENDOR_TEXT_VAL                 ((char_t const*)"www.ifm.com\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
#define PAL_EEP_IOL_PRODUCT_NAME_VAL                ((char_t const*)"INDxxxx\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
#define PAL_EEP_IOL_PRODUCT_ID_VAL                  PAL_EEP_IOL_PRODUCT_NAME_VAL
#define PAL_EEP_IOL_PRODUCT_TEXT_VAL                ((char_t const*)"Valve Sensor\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
#define PAL_EEP_IOL_HARDWARE_REVISION_VAL           ((char_t const*)"xx\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
#define PAL_EEP_IOL_SERIAL_NO_VAL                   ((char_t const*)"            ")       /*< serial number. init with space. is wirtten during production*/
#define PAL_EEP_IOL_DFLT_APP_SPECIFIC_TAG_VAL       ((char_t const*)"***\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
#define PAL_EEP_IOL_APP_SPECIFIC_TAG_VAL            PAL_EEP_wIOL_DFLT_APP_SPECIFIC_TAG_VAL
#define PAL_EEP_IOL_DFLT_LOCATION_TAG_VAL           ((char_t const*)"***\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
#define PAL_EEP_IOL_LOCATION_TAG_VAL                PAL_EEP_wIOL_DFLT_LOCATION_TAG_VAL
#define PAL_EEP_IOL_DFLT_FUNCTION_TAG_VAL           ((char_t const*)"***\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
#define PAL_EEP_IOL_FUNCTION_TAG_VAL                PAL_EEP_wIOL_DFLT_FUNCTION_TAG_VAL
/*URI: "https:\\product.ifm.com\[ArticleNumber]\[SerialNumber] Example: https:\\product.ifm.com\SA5000\471108151137*/
#define PAL_EEP_IOL_URI_VAL    ((char_t const*)"***\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")


/**********************************************************************/
/*****************addresses and sizes**********************************/
/**********************************************************************/

/* All data is stored bytewise. All addresses are bytewise
 highbit first, lowbyte first, strings: first character at first address*/
#define PAL_EEP_MIN_ARD_BY                          ((uint8_t)0x0000)      /*< lowest valid address [byte] in EEPROM */
#define PAL_EEP_MAP_START_ADR                       PAL_EEP_MIN_ARD_BY  /**< start address of the eeprom */

#define PAL_EEP_MAX_ARD_BY                          PAL_EEP_TOTAL_SIZE_BY /*< highest valid address [byte] in EEPROM */

/*Production, checksums and analog output*/
#define PAL_EEP_EEP_CHECK_RESERVED_ADR              ((uint16_t)0x0000)     /*< reserved for EEPROM check*/
#define PAL_EEP_EEP_CHECK_RESERVED_SZ               ((uint8_t)1)           /*< reserved for EEPROM check*/

#define PAL_EEP_MAP_VER_MAJ_ADR                     ((uint16_t)1)            /*< major version EEPROM table*/
#define PAL_EEP_MAP_VER_MAJ_SZ                      ((uint8_t)1)             /*< size of major version EEPROM table*/
#define PAL_EEP_MAP_VER_MIN_ADR                     ((uint16_t)2)            /*< minor version EEPROM table*/
#define PAL_EEP_MAP_VER_MIN_SZ                      ((uint8_t)1)             /*< size of minor version EEPROM table*/
#define PAL_EEP_MAP_VER_BUG_ADR                     ((uint16_t)3)            /*< bugfix version EEPROM table*/
#define PAL_EEP_MAP_VER_BUG_SZ                      ((uint8_t)1)             /*< size of bugfix version EEPROM table*/

/*reserved Check-sums EEPROM [0x0004 ... 0x006]*/

#define PAL_EEP_PROD_STATUS_ADR                     ((uint16_t)7)            /*< state in production process*/
#define PAL_EEP_PROD_STATUS_SZ                      ((uint16_t)2)            /*< size of state in production process*/
#define PAL_EEP_PROD_ERROR_ADR                      ((uint16_t)9)            /*< error state during production */
#define PAL_EEP_PROD_ERROR_SZ                       ((uint16_t)4)            /*< size of error state during production */
#define PAL_EEP_PROD_ID_ADR                         ((uint16_t)13)           /*< Identification: free write/readable array for Production */
#define PAL_EEP_PROD_ID_SZ                          ((uint16_t)19)           /*< size of Identification: free write/readable array for Production */

#define PAL_EEP_RESTORE_RST_SZ                      ((uint8_t)64)            /*<number of Bytes to restore when restoring restore data */
#define PAL_EEP_RESTORE_START_ADR                   ((uint16_t)96)           /*<Start of source-data to be copied when restoring restore data */
#define PAL_EEP_RESTORE_DEST_ADR                    ((uint16_t)32)           /*<Start of destination-data to be copied when restoring restore data */


#define PAL_EEP_SSC1_LOGIC_ADR                      ((uint16_t)32)           /*< switching point logic switching point 1*/
#define PAL_EEP_SSC1_LOGIC_SZ                       ((uint8_t)1)             /*< size of switching point logic switching point 1*/
#define PAL_EEP_SSC1_DS_ADR                         ((uint16_t)33)           /*< SSC1 Switch-ON delay*/
#define PAL_EEP_SSC1_DS_SZ                          ((uint8_t)2)             /*< size of SSC1 Switch-ON delay*/
#define PAL_EEP_SSC1_DR_ADR                         ((uint16_t)35)           /*< SSC1 Switch-OFF delay*/
#define PAL_EEP_SSC1_DR_SZ                          ((uint8_t)2)             /*< size of SSC1 Switch-OFF delay*/

#define PAL_EEP_SSC2_LOGIC_ADR                      ((uint16_t)37)           /*< switching point logic switching point 1*/
#define PAL_EEP_SSC2_LOGIC_SZ                       ((uint8_t)1)             /*< size of switching point logic switching point 1*/
#define PAL_EEP_SSC2_DS_ADR                         ((uint16_t)38)           /*< SSC2 Switch-ON delay*/
#define PAL_EEP_SSC2_DS_SZ                          ((uint8_t)2)             /*< size of SSC1 Switch-ON delay*/
#define PAL_EEP_SSC2_DR_ADR                         ((uint16_t)40)           /*< SSC2 Switch-OFF delay*/
#define PAL_EEP_SSC2_DR_SZ                          ((uint8_t)2)             /*< size of SSC1 Switch-OFF delay*/

#define PAL_EEP_P_N_MODE_ADR                        ((uint16_t)42)           /*< operation mode of output: 0x00 => PNP, 0x01 => NPN*/
#define PAL_EEP_P_N_MODE_SZ                         ((uint8_t)1)             /*< operation mode of output*/

#define PAL_EEP_OU2_ADR                             ((uint16_t)43)           /*< analog output mode (user parameter) pin analog*/
#define PAL_EEP_OU2_SZ                              ((uint8_t)1)             /*< size of analog output mode (user parameter)*/

#define PAL_EEP_OU1_ADR                             ((uint16_t)44)           /*< analog output mode (user parameter) pin SIO*/
#define PAL_EEP_OU1_SZ                              ((uint8_t)1)             /*< size of analog output mode (user parameter)*/

#define PAL_EEP_DFU1_ADR                            ((uint16_t)45)           /*parameter for diagnosis funtion to control output, when Ou1 = PAL_IOL_ANALOG_USER_CFG_DOU  */  
#define PAL_EEP_DFU1_SZ                             ((uint8_t)1)              /*parameter for diagnosis funtion to control output, when Ou1 = PAL_IOL_ANALOG_USER_CFG_DOU  */  

#define PAL_EEP_DFU2_ADR                            ((uint16_t)46)           /*parameter for diagnosis funtion to control output, when Ou2 = PAL_IOL_ANALOG_USER_CFG_DOU  */  
#define PAL_EEP_DFU2_SZ                             ((uint8_t)1)              /*parameter for diagnosis funtion to control output, when Ou2 = PAL_IOL_ANALOG_USER_CFG_DOU  */  

/*counter*/
#define PAL_EEP_S1CT_THRES_ADR                      ((uint16_t)47)            /*< threshold for counter. above this thesold: set SxCT Bit*/   
#define PAL_EEP_S1CT_THRES_SZ                       ((uint8_t)4)          
#define PAL_EEP_S1CT_COUNT_CONDITION_ADR            ((uint16_t)51)            /*< should the counter increment from 0->1 or from 1->0 or both?*/
#define PAL_EEP_S1CT_COUNT_CONDITION_SZ             ((uint8_t)1)  
#define PAL_EEP_S1CT_COUNT_AUTO_RELOAD_ADR          ((uint16_t)52)            /* < enable auto-reload with zero when threshold is reached?*/
#define PAL_EEP_S1CT_COUNT_AUTO_RELOAD_SZ           ((uint8_t)1)          
#define PAL_EEP_S1CT_COUNT_DUTRATION_MS_ADR         ((uint16_t)53)            /*< how long should the SxCT bit be set when counter was reset because of auto- reload?*/
#define PAL_EEP_S1CT_COUNT_DUTRATION_MS_SZ          ((uint8_t)2)  

#define PAL_EEP_S2CT_THRES_ADR                      ((uint16_t)55)           /*< threshold for counter. above this thesold: set SxCT Bit*/  
#define PAL_EEP_S2CT_THRES_SZ                       ((uint8_t)4)          
#define PAL_EEP_S2CT_COUNT_CONDITION_ADR            ((uint16_t)59)            /*< should the counter increment from 0->1 or from 1->0 or both?*/
#define PAL_EEP_S2CT_COUNT_CONDITION_SZ             ((uint8_t)1)  
#define PAL_EEP_S2CT_COUNT_AUTO_RELOAD_ADR          ((uint16_t)60)            /*< enable auto-reload with zero when threshold is reached?*/
#define PAL_EEP_S2CT_COUNT_AUTO_RELOAD_SZ           ((uint8_t)1)          
#define PAL_EEP_S2CT_COUNT_DUTRATION_MS_ADR         ((uint16_t)61)            /*< how long should the SxCT bit be set when counter was reset because of auto- reload?*/
#define PAL_EEP_S2CT_COUNT_DUTRATION_MS_SZ          ((uint8_t)2) 

#define PAL_EEP_LO_LIMIT_OPENING_TIME_MS_ADR        ((uint16_t)63)            /*< low limit for opening time in ms*/
#define PAL_EEP_LO_LIMIT_OPENING_TIME_MS_SZ         ((uint8_t)2) 
#define PAL_EEP_HI_LIMIT_OPENING_TIME_MS_ADR        ((uint16_t)65)            /*< high limit for opening time in ms*/
#define PAL_EEP_HI_LIMIT_OPENING_TIME_MS_SZ         ((uint8_t)2) 
#define PAL_EEP_LO_LIMIT_CLOSING_TIME_MS_ADR        ((uint16_t)67)            /*< low limit for closing time in ms*/
#define PAL_EEP_LO_LIMIT_CLOSING_TIME_MS_SZ         ((uint8_t)2) 
#define PAL_EEP_HI_LIMIT_CLOSING_TIME_MS_ADR        ((uint16_t)69)            /*< high limit for closing time in ms*/
#define PAL_EEP_HI_LIMIT_CLOSING_TIME_MS_SZ         ((uint8_t)2) 

#define PAL_EEP_TIMEOUT_OPENING_CLOSING_TIME_MS_ADR ((uint16_t)71)            /*< timeout for opening and closing time in ms*/
#define PAL_EEP_TIMEOUT_OPENING_CLOSING_TIME_MS_SZ  ((uint8_t)2) 
#if defined T_TYPE
/*todo*/
/*todo autoteach?*/
#define PAL_EEP_VALVE_MODE_ADR ((uint16_t)73)            /*< valve mode*/
#define PAL_EEP_VALVE_MODE_SZ  ((uint8_t)1) 

#else
#endif


/*adresses [73...95} are free, reserved for user parameters. they are restored by adresses [131... 159]*/
#define PAL_EEP_SSC1_LOGIC_RST_ADR                  ((uint16_t)96)           /*< switching point logic switching point 1*/
#define PAL_EEP_SSC1_LOGIC_RST_SZ                   ((uint8_t)1)             /*< size of switching point logic switching point 1*/
#define PAL_EEP_SSC1_DS_RST_ADR                     ((uint16_t)97)           /*< SSC1 Switch-ON delay*/
#define PAL_EEP_SSC1_DS_RST_SZ                      ((uint8_t)2)             /*< size of SSC1 Switch-ON delay*/
#define PAL_EEP_SSC1_DR_RST_ADR                     ((uint16_t)99)           /*< SSC1 Switch-OFF delay*/
#define PAL_EEP_SSC1_DR_RST_SZ                      ((uint8_t)2)             /*< size of SSC1 Switch-OFF delay*/

#define PAL_EEP_SSC2_LOGIC_RST_ADR                  ((uint16_t)101)         /*< switching point logic switching point 1*/
#define PAL_EEP_SSC2_LOGIC_RST_SZ                   ((uint8_t)1)             /*< size of switching point logic switching point 1*/
#define PAL_EEP_SSC2_DS_RST_ADR                     ((uint16_t)102)          /*< SSC1 Switch-ON delay*/
#define PAL_EEP_SSC2_DS_RST_SZ                      ((uint8_t)2)             /*< size of SSC1 Switch-ON delay*/
#define PAL_EEP_SSC2_DR_RST_ADR                     ((uint16_t)104)          /*< SSC1 Switch-OFF delay*/
#define PAL_EEP_SSC2_DR_RST_SZ                      ((uint8_t)2)             /*< size of SSC1 Switch-OFF delay*/

#define PAL_EEP_P_N_MODE_RST_ADR                    ((uint16_t)106)          /*< operation mode of output: 0x00 => PNP, 0x01 => NPN*/
#define PAL_EEP_P_N_MODE_RST_SZ                     ((uint8_t)1)             /*< operation mode of output*/

#define PAL_EEP_OU2_RST_ADR                         ((uint16_t)107)          /*< analog output mode (user parameter) pin analog*/
#define PAL_EEP_OU2_RST_SZ                          ((uint8_t)1)             /*< size of analog output mode (user parameter)*/

#define PAL_EEP_OU1_RST_ADR                         ((uint16_t)108)          /*< analog output mode (user parameter) pin SIO*/
#define PAL_EEP_OU1_RST_SZ                          ((uint8_t)1)             /*< size of analog output mode (user parameter)*/

#define PAL_EEP_DFU1_RST_ADR                        ((uint16_t)109)           /*parameter for diagnosis funtion to control output, when Ou1 = PAL_IOL_ANALOG_USER_CFG_DOU  */  
#define PAL_EEP_DFU1_RST_SZ                         ((uint8_t)1)             /*parameter for diagnosis funtion to control output, when Ou1 = PAL_IOL_ANALOG_USER_CFG_DOU  */  

#define PAL_EEP_DFU2_RST_ADR                        ((uint16_t)110)            /*parameter for diagnosis funtion to control output, when Ou2 = PAL_IOL_ANALOG_USER_CFG_DOU  */  
#define PAL_EEP_DFU2_RST_SZ                         ((uint8_t)1)              /*parameter for diagnosis funtion to control output, when Ou2 = PAL_IOL_ANALOG_USER_CFG_DOU  */  

/*counter*/
#define PAL_EEP_S1CT_THRES_RST_ADR                  ((uint16_t)111)            /*< threshold for counter. above this thesold: set SxCT Bit*/   
#define PAL_EEP_S1CT_THRES_RST_SZ                   ((uint8_t)4)          
#define PAL_EEP_S1CT_COUNT_CONDITION_RST_ADR        ((uint16_t)115)            /*< should the counter increment from 0->1 or from 1->0 or both?*/
#define PAL_EEP_S1CT_COUNT_CONDITION_RST_SZ         ((uint8_t)1)  
#define PAL_EEP_S1CT_COUNT_AUTO_RELOAD_RST_ADR      ((uint16_t)116)            /* < enable auto-reload with zero when threshold is reached?*/
#define PAL_EEP_S1CT_COUNT_AUTO_RELOAD_RST_SZ       ((uint8_t)1)          
#define PAL_EEP_S1CT_COUNT_DUTRATION_MS_RST_ADR     ((uint16_t)117)            /*< how log should the SxCT bit be set when counter was reset because of auto- reload?*/
#define PAL_EEP_S1CT_COUNT_DUTRATION_MS_RST_SZ      ((uint8_t)2)  

#define PAL_EEP_S2CT_THRES_RST_ADR                  ((uint16_t)119)           /*< threshold for counter. above this thesold: set SxCT Bit*/  
#define PAL_EEP_S2CT_THRES_RST_SZ                   ((uint8_t)4)          
#define PAL_EEP_S2CT_COUNT_CONDITION_RST_ADR        ((uint16_t)123)            /*< should the counter increment from 0->1 or from 1->0 or both?*/
#define PAL_EEP_S2CT_COUNT_CONDITION_RST_SZ         ((uint8_t)1)  
#define PAL_EEP_S2CT_COUNT_AUTO_RELOAD_RST_ADR      ((uint16_t)124)            /*< enable auto-reload with zero when threshold is reached?*/
#define PAL_EEP_S2CT_COUNT_AUTO_RELOAD_RST_SZ       ((uint8_t)1)          
#define PAL_EEP_S2CT_COUNT_DUTRATION_MS_RST_ADR     ((uint16_t)125)            /*< how log should the SxCT bit be set when counter was reset because of auto- reload?*/
#define PAL_EEP_S2CT_COUNT_DUTRATION_MS_RST_SZ      ((uint8_t)2) 
   
#define PAL_EEP_LO_LIMIT_OPENING_TIME_MS_RST_ADR    ((uint16_t)127)            /*< low limit for opening time in ms*/
#define PAL_EEP_LO_LIMIT_OPENING_TIME_MS_RST_SZ     ((uint8_t)2) 
#define PAL_EEP_HI_LIMIT_OPENING_TIME_MS_RST_ADR    ((uint16_t)129)            /*< high limit for opening time in ms*/
#define PAL_EEP_HI_LIMIT_OPENING_TIME_MS_RST_SZ     ((uint8_t)2) 
#define PAL_EEP_LO_LIMIT_CLOSING_TIME_MS_RST_ADR    ((uint16_t)131)            /*< low limit for closing time in ms*/
#define PAL_EEP_LO_LIMIT_CLOSING_TIME_MS_RST_SZ     ((uint8_t)2) 
#define PAL_EEP_HI_LIMIT_CLOSING_TIME_MS_RST_ADR    ((uint16_t)133)            /*< high limit for closing time in ms*/
#define PAL_EEP_HI_LIMIT_CLOSING_TIME_MS_RST_SZ     ((uint8_t)2) 

#define PAL_EEP_TIMEOUT_OPENING_CLOSING_TIME_MS_RST_ADR ((uint16_t)135)            /*< timeout for opening and closing time in ms*/
#define PAL_EEP_TIMEOUT_OPENING_CLOSING_TIME_MS_RST_SZ  ((uint8_t)2) 
    
#if defined T_TYPE
/*todo*/
/*todo autoteach?*/
#define PAL_EEP_VALVE_MODE_RST_ADR ((uint16_t)136)            /*< valve mode*/
#define PAL_EEP_VALVE_MODE_RST_SZ  ((uint8_t)1) 

#else
#endif
/*adresses [147...159] are free*/

/*< permanently stored value of SSC1 switching counter. safe-stored value, acces by utils_safe_wrt_doubleword_mult() and utils_safe_rd_doubleword_mult()
value is a double int, stored with a byMemCnt of 4 >= 4* 1 Mio write acesses */
/**/
#define PAL_EEP_SAFE_STORE_BYTES_PER_DW             ((uint8_t)5) /*see pal_eep_man*/

#define PAL_EEP_SSC1_CNT_MEM_CNT                    ((uint8_t)4)  /*max writes: this define * 1 Mio*/
#define PAL_EEP_SSC1_CNT_ADR                        ((uint16_t)160)            
#define PAL_EEP_SSC1_CNT_SZ                         ((uint8_t) 20 )  /* = PAL_EEP_by_SAFE_STORE_BYTES_PER_DW * PAL_EEP_bySSC1_CNT_MEM_CNT*/

#define PAL_EEP_SSC2_CNT_MEM_CNT                    ((uint8_t)4)  /*max writes: this define * 1 Mio*/
#define PAL_EEP_SSC2_CNT_ADR                        ((uint16_t)180)           
#define PAL_EEP_SSC2_CNT_SZ                         ((uint8_t) 20 )  /* = PAL_EEP_by_SAFE_STORE_BYTES_PER_DW * PAL_EEP_bySSC2_CNT_MEM_CNT*/

/*logs during runtime*/
#define PAL_EEP_PWR_UPS_ADR                         ((uint16_t)200)          /*<power up counter*/
#define PAL_EEP_PWR_UPS_SZ_ADR                      ((uint8_t) 10)           /*<length of power up counter: safe stored doubleword: 10 bytes*/
#define PAL_EEP_OP_HR_ADR                           ((uint16_t)210)          /*<hours of operation: full hours*/
#define PAL_EEP_OP_HR_SZ                            ((uint8_t) 10)           /*<length of hours of operation: full hours: safe stored doubleword: 10 bytes*/

/*[220 ...223] are free*/
/*Boundaries for parameter check*/
#define PAL_EEP_SSCx_DS_MIN_ADR                     ((uint16_t)256)          /*< lowest allowed value of DS. same value for all SSCs*/
#define PAL_EEP_SSCx_DS_MIN_SZ                      ((uint8_t)2)             /*< size of lowest allowed value of DS. same value for all SSCs**/
#define PAL_EEP_SSCx_DS_MAX_ADR                     ((uint16_t)258)          /*< highest allowed value of DS. same value for all SSCs* */
#define PAL_EEP_SSCx_DS_MAX_SZ                      ((uint8_t)2)             /*< size of highest allowed value of DS. same value for all SSCs* */

#define PAL_EEP_SSCx_DR_MIN_ADR                     ((uint16_t)260)          /*< lowest allowed value of DR. same value for all SSCs*/
#define PAL_EEP_SSCx_DR_MIN_SZ                      ((uint8_t)2)             /*< size of lowest allowed value of DR. same value for all SSCs**/
#define PAL_EEP_SSCx_DR_MAX_ADR                     ((uint16_t)262)          /*< highest allowed value of DR. same value for all SSCs* */
#define PAL_EEP_SSCx_DR_MAX_SZ                      ((uint8_t)2)             /*< size of highest allowed value of DR. same value for all SSCs* */

#define PAL_EEP_wLIMIT_OPENING_CLOSING_TIME_MIN_MS_ADR  ((uint16_t)264)          /*< lowest allowed value of DR. same value for all SSCs*/
#define PAL_EEP_wLIMIT_OPENING_CLOSING_TIME_MIN_MS_SZ   ((uint8_t)2)             /*< size of lowest allowed value of DR. same value for all SSCs**/
#define PAL_EEP_wLIMIT_OPENING_CLOSING_TIME_MAX_MS_ADR  ((uint16_t)266)          /*< highest allowed value of DR. same value for all SSCs* */
#define PAL_EEP_wLIMIT_OPENING_CLOSING_TIME_MAX_MS_SZ   ((uint8_t)2)             /*< size of highest allowed value of DR. same value for all SSCs* */
   
/*parameters for detection of faults*/
/*todo correct adresses*/
#define PAL_EEP_TEMP_THRES_LO_1C_ADR                ((uint16_t)288)          /*< lower limit for Temperature check[1°C]*/
#define PAL_EEP_TEMP_THRES_LO_1C_SZ                 ((uint8_t)2)             /*< size of lower limit for Temperature check[1°C]*/
#define PAL_EEP_TEMP_THRES_HI_1C_ADR                ((uint16_t)290)          /*< upper limit for Temperature check[1°C]*/
#define PAL_EEP_TEMP_THRES_HI_1C_SZ                 ((uint8_t)2)             /*< size of upper limit for Temperature check[1°C]*/
      
#define PAL_EEP_V_DEMOD_SENSOR1_LIMIT_LOWER_ADR     ((uint16_t)292)          /*< lower limit for V_DEMOD check [12Bit ADC, VDD Ref+]*/
#define PAL_EEP_V_DEMOD_SENSOR1_LIMIT_LOWER_SZ      ((uint8_t)2)             /*< size of lower limit for V_DEMOD check [12Bit ADC, VDD Ref+] */
#define PAL_EEP_V_DEMOD_SENSOR1_LIMIT_UPPER_ADR     ((uint16_t)294)          /*< upper limit for V_DEMOD check [12Bit ADC, VDD Ref+]*/
#define PAL_EEP_V_DEMOD_SENSOR1_LIMIT_UPPER_SZ      ((uint8_t)2)             /*< size of upper limit for V_DEMOD check [12Bit ADC, VDD Ref+]*/

#define PAL_EEP_V_DEMOD_SENSOR2_LIMIT_LOWER_ADR     ((uint16_t)296)          /*< lower limit for V_DEMOD check [12Bit ADC, VDD Ref+]*/
#define PAL_EEP_V_DEMOD_SENSOR2_LIMIT_LOWER_SZ      ((uint8_t)2)             /*< size of lower limit for V_DEMOD check [12Bit ADC, VDD Ref+] */
#define PAL_EEP_V_DEMOD_SENSOR2_LIMIT_UPPER_ADR     ((uint16_t)298)          /*< upper limit for V_DEMOD check [12Bit ADC, VDD Ref+]*/
#define PAL_EEP_V_DEMOD_SENSOR2_LIMIT_UPPER_SZ      ((uint8_t)2)             /*< size of upper limit for V_DEMOD check [12Bit ADC, VDD Ref+]*/

#define PAL_EEP_PT1_SHIFT_VDEMOD_SENSOR1_ADR        ((uint16_t)320)          /*< filter constant for filtering VDEMOD (Shift of PT1 filter)*/
#define PAL_EEP_PT1_SHIFT_VDEMOD_SENSOR1_SZ         ((uint8_t)1)             /*< size of filter constant for filtering VDEMOD (Shift of PT1 filter)*/

#define PAL_EEP_PT1_SHIFT_VDEMOD_SENSOR2_ADR        ((uint16_t)321)          /*< filter constant for filtering VDEMOD (Shift of PT1 filter)*/
#define PAL_EEP_PT1_SHIFT_VDEMOD_SENSOR2_SZ         ((uint8_t)1)             /*< size of filter constant for filtering VDEMOD (Shift of PT1 filter)*/

#define PAL_EEP_PT1_SHIFT_VTEMP_ADR                 ((uint16_t)322)          /*< filter constant for filtering VDEMOD (Shift of PT1 filter)*/
#define PAL_EEP_PT1_SHIFT_VTEMP_SZ                  ((uint8_t)1)             /*< size of filter constant for filtering VDEMOD (Shift of PT1 filter)*/
      
#define PAL_EEP_THRES_TARGET_DAC_SENSOR1_ADR        ((uint16_t)352)          /* threshold for taget present */
#define PAL_EEP_THRES_TARGET_DAC_SENSOR1_SZ         ((uint8_t)2)
#define PAL_EEP_THRES_NO_TARGET_DAC_SENSOR1_ADR     ((uint16_t)354)          /* threshold for no taget present */
#define PAL_EEP_THRES_NO_TARGET_DAC_SENSOR1_SZ      ((uint8_t)2)

#define PAL_EEP_THRES_TARGET_PWM_SENSOR2_ADR        ((uint16_t)356)          /* threshold for taget present */
#define PAL_EEP_THRES_TARGET_PWM_SENSOR2_SZ         ((uint8_t)2)
#define PAL_EEP_THRES_NO_TARGET_PWM_SENSOR2_ADR     ((uint16_t)358)          /* threshold for no taget present */
#define PAL_EEP_THRES_NO_TARGET_PWM_SENSOR2_SZ      ((uint8_t)2)
      
/*360...415 free*/
/*Temperature compensation*/
#define PAL_EEP_TEMPCOMP_S1_FA_ADR                     ((uint16_t)416)         /*< Factor for temp compensation. float32_t, stored as byte array, highbyte first*/
#define PAL_EEP_TEMPCOMP_S1_FA_SZ                      ((uint8_t)4)           /*< size of float32_byte as array */
#define PAL_EEP_TEMPCOMP_S1_FB_ADR                     ((uint16_t)420)         /*< Factor for temp compensation. float32_t, stored as byte array, highbyte first*/
#define PAL_EEP_TEMPCOMP_S1_FB_SZ                      ((uint8_t)4)           /*< size of float32_byte as array */
#define PAL_EEP_TEMPCOMP_S1_FC_ADR                     ((uint16_t)424)         /*< Factor for temp compensation. float32_t, stored as byte array, highbyte first*/
#define PAL_EEP_TEMPCOMP_S1_FC_SZ                      ((uint8_t)4)           /*< size of float32_byte as array */

#define PAL_EEP_TEMPCOMP_S2_FA_ADR                     ((uint16_t)428)         /*< Factor for temp compensation. float32_t, stored as byte array, highbyte first*/
#define PAL_EEP_TEMPCOMP_S2_FA_SZ                      ((uint8_t)4)           /*< size of float32_byte as array */
#define PAL_EEP_TEMPCOMP_S2_FB_ADR                     ((uint16_t)432)         /*< Factor for temp compensation. float32_t, stored as byte array, highbyte first*/
#define PAL_EEP_TEMPCOMP_S2_FB_SZ                      ((uint8_t)4)           /*< size of float32_byte as array */
#define PAL_EEP_TEMPCOMP_S2_FC_ADR                     ((uint16_t)436)         /*< Factor for temp compensation. float32_t, stored as byte array, highbyte first*/
#define PAL_EEP_TEMPCOMP_S2_FC_SZ                      ((uint8_t)4)           /*< size of float32_byte as array */

/*IO-Link*/
#define PAL_EEP_IOL_URI_ADR                           ((uint16_t)461)           /*< URI "https:\\product.ifm.com\[ArticleNumber]\[SerialNumber] Example: https:\\product.ifm.com\SA5000\471108151137 */
#define PAL_EEP_IOL_URI_SZ                            ((uint8_t)100)            /*< size of URI */

#define PAL_EEP_IOL_DS_UPLOAD_FLAG_ADR                ((uint16_t)562)           /*< datastorage upload flag*/
#define PAL_EEP_IOL_DS_UPLOAD_FLAG_SZ                 ((uint8_t)1)              /*< size of datastorage upload flag */

#define PAL_EEP_IOL_DEV_ACC_LOCKS_ADR                 ((uint16_t)563)           /*< device access locks*/
#define PAL_EEP_IOL_DEV_ACC_LOCKS_SZ                  ((uint8_t)2)              /*< size of device access locks */

#define PAL_EEP_IOL_VENDOR_ID_ADR                     ((uint16_t)565)           /*< Vendor ID*/
#define PAL_EEP_IOL_VENDOR_ID_SZ                      ((uint8_t)2)              /*< size of Vendor ID */

#define PAL_EEP_IOL_USER_UNBLOCKING_ADR               ((uint16_t)567)           /*< user unblocking*/
#define PAL_EEP_IOL_USER_UNBLOCKING_SZ                ((uint8_t)1)              /*< size of user unblocking */
#define PAL_EEP_IOL_STARTUP_ACCESS_ADR                ((uint16_t)568)           /*< startup access*/
#define PAL_EEP_IOL_STARTUP_ACCESS_SZ                 ((uint8_t)2)              /*< size of startup access */

#define PAL_EEP_IOL_WRITE_DEFAULT_COMPLETE_FLAG_ADR   ((uint16_t)570)           /*< write default complete flag*/
#define PAL_EEP_IOL_WRITE_DEFAULT_COMPLETE_FLAG_SZ    ((uint8_t)1)              /*< size of write default complete flag*/
#define PAL_EEP_IOL_WRITE_DEFAULT_COMPLETE_FLAG_OK    ((uint8_t)0x4B)           /*< 0x4B = "K" Data restore is complete, data is OK*/
#define PAL_EEP_IOL_WRITE_DEFAULT_COMPLETE_FLAG_NOK   ((uint8_t)0x4E)           /*< 0x4E = "N" Data restore is not complete, data is NOK*/

#define PAL_EEP_EMBOD_SELECTOR_VAL          		  ((uint8_t)0x00)		    /*init value of embodiment selctor*/
#define PAL_EEP_EMBOD_MEMORY_ADR                      ((uint16_t)571)           /*Adress of embodiment selector*/
#define PAL_EEP_EMBOD_MEMORY_SZ                       (((uint8_t)1)             /*size of embodiment selector*/

#define PAL_EEP_DEVICE_SELECTOR_VAL                   ((uint8_t)0x03)           /*init value of Device selector. this is a bitfield: 0x03 means that embod 1 and embod 2 are supported*/
#define PAL_EEP_DEVICE_SELECTOR_ADR                   ((uint16_t)572)           /*adress of device selector*/  
#define PAL_EEP_DEVICE_SELECTOR_SZ                    ((uint8_t)1)              /*size of device selector*/
#define PAL_EEP_IOL_DEVICE_1_ID_ADR                   ((uint16_t)573)           /*< Device ID*/
#define PAL_EEP_IOL_DEVICE_1_ID_SZ                    ((uint8_t)3)              /*< size ofDevice ID */

#define PAL_EEP_SW_SN_FLASH_ADR                       ((uint16_t)576)           /*< ERP Number of the application, programmed into the flash */
#define PAL_EEP_SW_SN_FLASH_SZ                        ((uint8_t)10)             /*< size of ERP Number of the application, programmed into the flash*/
#define PAL_EEP_SW_SN_EEP_ADR                         ((uint16_t)586)           /*< ERP Number of the EEPROM */
#define PAL_EEP_SW_SN_EEP_SZ                          ((uint8_t)10)             /*< size of ERP Number of the EEPROM */

#define PAL_EEP_IOL_SVN_REV_ADR                       ((uint16_t)596)           /*< subversion revision */
#define PAL_EEP_IOL_SVN_REV_SZ                        ((uint8_t)12)             /*< size of subversion revision*/

#define PAL_EEP_IOL_VENDOR_NAME_ADR                  ((uint16_t)608)           /*< vendor name*/
#define PAL_EEP_IOL_VENDOR_NAME_SZ                   ((uint8_t)32)             /*< size of vendor name */
#define PAL_EEP_IOL_VENDOR_TEXT_ADR                  ((uint16_t)640)           /*< vendor text*/
#define PAL_EEP_IOL_VENDOR_TEXT_SZ                   ((uint8_t)32)             /*< size of vendor text*/
#define PAL_EEP_IOL_PRODUCT_NAME_ADR                 ((uint16_t)672)           /*< product name*/
#define PAL_EEP_IOL_PRODUCT_NAME_SZ                  ((uint8_t)32)             /*< size of product name*/
#define PAL_EEP_IOL_PRODUCT_ID_ADR                   ((uint16_t)704)           /*< product ID*/
#define PAL_EEP_IOL_PRODUCT_ID_SZ                    ((uint8_t)32)             /*< size of product ID*/
#define PAL_EEP_IOL_PRODUCT_TEXT_ADR                 ((uint16_t)736)           /*< Product text*/
#define PAL_EEP_IOL_PRODUCT_TEXT_SZ                  ((uint8_t)32)             /*< size of product text*/

#define PAL_EEP_IOL_HARDWARE_REVISION_ADR            ((uint16_t)768)           /*< hw revision = Status of product*/
#define PAL_EEP_IOL_HARDWARE_REVISION_SZ             ((uint8_t)32)             /*< size of HW revision = Status of product */
#define PAL_EEP_IOL_FIRMWARE_REVISION_ADR            ((uint16_t)800)           /*< firmware revision = Version of application*/
#define PAL_EEP_IOL_FIRMWARE_REVISION_SZ             ((uint8_t)16)             /*< size of firmware revision = Version of application */
#define PAL_EEP_IOL_SERIAL_NO_ADR                    ((uint16_t)816)           /*< serial number*/
#define PAL_EEP_IOL_SERIAL_NO_SZ                     ((uint8_t)12)             /*< size of serial number */
#define PAL_EEP_IOL_DS_CHECKSUM_ADR                  ((uint16_t)828)           /*< Datastorage checkum, lowyte first*/
#define PAL_EEP_IOL_DS_CHECKSUM_SZ                   ((uint8_t)4)              /*< size of Datastorage checkum */  

#define PAL_EEP_IOL_APP_SPECIFIC_TAG_ADR             ((uint16_t)832)           /*< application specific tag, user modifiable*/
#define PAL_EEP_IOL_APP_SPECIFIC_TAG_SZ              ((uint8_t)32)             /*< size of application specific tag, user modifiable*/
#define PAL_EEP_IOL_DFLT_APP_SPECIFIC_TAG_ADR        ((uint16_t)864)           /*< reset value of application specific tag*/
#define PAL_EEP_IOL_DFLT_APP_SPECIFIC_TAG_SZ         ((uint8_t)32)             /*< size of reset value of application specific tag */

#define PAL_EEP_IOL_FUNCTION_TAG_ADR                 ((uint16_t)896)           /*< function tag, user modifiable*/
#define PAL_EEP_IOL_FUNCTION_TAG_SZ                  ((uint8_t)32)             /*< size of function tag, user modifiable*/
#define PAL_EEP_IOL_DFLT_FUNCTION_TAG_ADR            ((uint16_t)928)           /*< reset value of functiontag*/
#define PAL_EEP_IOL_DFLT_FUNCTION_TAG_SZ             ((uint8_t)32)             /*< size of reset value of function tag */

#define PAL_EEP_IOL_LOCATION_TAG_ADR                 ((uint16_t)960)           /*< location tag, user modifiable*/
#define PAL_EEP_IOL_LOCATION_TAG_SZ                  ((uint8_t)32)             /*< size of location tag, user modifiable*/
#define PAL_EEP_IOL_DFLT_LOCATION_TAG_ADR            ((uint16_t)992)           /*< reset value of location tag*/
#define PAL_EEP_IOL_DFLT_LOCATION_TAG_SZ             ((uint8_t)32)             /*< size of reset value of location tag */

#define PAL_EEP_MAP_END_ADR                          ((uint16_t)1023)          /**< address of the end of the eeprom */ 

/* macros ********************************************************************/

/* types *********************************************************************/

/* variables *****************************************************************/

/* function prototypes *******************************************************/

/* include guard *************************************************************/

#endif /*PAL_EEP_MAP_H*/

/*************************** End of file *************************************/
